#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Teste da fun√ß√£o de distribui√ß√£o autom√°tica de vagas
"""

import sys
sys.path.append('./app')

from models.CursoBase import CursoBase

def testar_distribuicao():
    """
    Testa a fun√ß√£o de distribui√ß√£o com diferentes valores
    """
    print("üß™ Testando distribui√ß√£o autom√°tica de vagas\n")
    
    casos_teste = [10, 20, 50, 100, 37, 1, 2, 3]
    
    for total in casos_teste:
        print(f"üìä Total de vagas: {total}")
        try:
            distribuicao = CursoBase.calcular_distribuicao_vagas(total)
            
            # Verificar se a soma est√° correta
            soma = sum(distribuicao.values())
            
            print(f"   ‚Ä¢ Ampla Concorr√™ncia: {distribuicao['vagas_ac']}")
            print(f"   ‚Ä¢ PPI + EP + BR: {distribuicao['vagas_ppi_br']}")
            print(f"   ‚Ä¢ EP + BR: {distribuicao['vagas_publica_br']}")
            print(f"   ‚Ä¢ PPI + EP: {distribuicao['vagas_ppi_publica']}")
            print(f"   ‚Ä¢ EP: {distribuicao['vagas_publica']}")
            print(f"   ‚Ä¢ PcD: {distribuicao['vagas_deficientes']}")
            print(f"   ‚úÖ Soma: {soma} (OK: {soma == total})")
            
            if soma != total:
                print(f"   ‚ùå ERRO: Soma {soma} != Total {total}")
            
            print()
            
        except Exception as e:
            print(f"   ‚ùå ERRO: {e}\n")
    
    # Teste com valores inv√°lidos
    print("üö´ Testando valores inv√°lidos:")
    valores_invalidos = [0, -5, 'abc', None, 3.14]
    
    for valor in valores_invalidos:
        try:
            resultado = CursoBase.calcular_distribuicao_vagas(valor)
            print(f"   ‚ùå Valor {valor} deveria ter dado erro!")
        except ValueError as e:
            print(f"   ‚úÖ Valor {valor}: {e}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Valor {valor}: Erro inesperado: {e}")

if __name__ == "__main__":
    testar_distribuicao()
