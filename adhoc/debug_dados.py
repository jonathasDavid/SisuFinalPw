#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Debug: Verificar se os dados est√£o sendo salvos corretamente
"""

import sys
sys.path.append('./app')

try:
    from models.Edicao import Edicao
    from models.EdicaoCurso import EdicaoCurso
    from models.Curso import Curso
    
    print("üîç DEBUGGING: Verificando dados no banco")
    print("=" * 60)
    
    # Listar todas as edi√ß√µes
    print("\nüìã EDI√á√ïES EXISTENTES:")
    try:
        edicoes = Edicao.all()
        if edicoes:
            for edicao in edicoes:
                print(f"  ‚Ä¢ ID: {edicao.id}, Nome: {edicao.nome}, Ano: {edicao.ano}, Semestre: {edicao.semestre}")
        else:
            print("  (Nenhuma edi√ß√£o encontrada)")
    except Exception as e:
        print(f"  ‚ùå Erro ao buscar edi√ß√µes: {e}")
    
    # Listar todos os cursos
    print("\nüéì CURSOS EXISTENTES:")
    try:
        cursos = Curso.all()
        if cursos:
            for curso in cursos:
                print(f"  ‚Ä¢ ID: {curso.id}, Nome: {curso.nome}")
        else:
            print("  (Nenhum curso encontrado)")
    except Exception as e:
        print(f"  ‚ùå Erro ao buscar cursos: {e}")
    
    # Listar todas as associa√ß√µes EdicaoCurso
    print("\nüîó ASSOCIA√á√ïES EDI√á√ÉO-CURSO:")
    try:
        edicao_cursos = EdicaoCurso.all()
        if edicao_cursos:
            for ec in edicao_cursos:
                total_vagas = ec.total_vagas() if hasattr(ec, 'total_vagas') else 'N/A'
                print(f"  ‚Ä¢ Edi√ß√£o: {ec.edicao_id}, Curso: {ec.curso_id}, Total Vagas: {total_vagas}")
                print(f"    - AC: {ec.vagas_ac}, PPI+BR: {ec.vagas_ppi_br}, PUB+BR: {ec.vagas_publica_br}")
                print(f"    - PPI+PUB: {ec.vagas_ppi_publica}, PUB: {ec.vagas_publica}, PCD: {ec.vagas_deficientes}")
        else:
            print("  (Nenhuma associa√ß√£o encontrada)")
    except Exception as e:
        print(f"  ‚ùå Erro ao buscar associa√ß√µes: {e}")
        
    # Teste espec√≠fico: buscar cursos de uma edi√ß√£o
    print("\nüß™ TESTE: Buscar cursos da edi√ß√£o mais recente")
    try:
        edicoes = Edicao.all()
        if edicoes:
            ultima_edicao = edicoes[-1]  # Pegar a √∫ltima edi√ß√£o
            print(f"Testando edi√ß√£o: {ultima_edicao.nome} (ID: {ultima_edicao.id})")
            
            # Simular a l√≥gica do controller view
            edicao_cursos_query = EdicaoCurso()
            edicao_cursos_raw = edicao_cursos_query.where('edicao_id', ultima_edicao.id).get()
            
            print(f"EdicaoCursos encontrados: {len(edicao_cursos_raw)}")
            
            edicao_cursos = []
            for edicao_curso in edicao_cursos_raw:
                curso = Curso.find(edicao_curso.curso_id)
                if curso:
                    edicao_cursos.append({
                        'curso': curso,
                        'configuracao': edicao_curso
                    })
                    print(f"  ‚úÖ Curso: {curso.nome} - {edicao_curso.total_vagas()} vagas")
                else:
                    print(f"  ‚ùå Curso ID {edicao_curso.curso_id} n√£o encontrado")
            
            print(f"Total de cursos v√°lidos: {len(edicao_cursos)}")
        else:
            print("Nenhuma edi√ß√£o para testar")
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()
    
except ImportError as e:
    print(f"‚ùå Erro de importa√ß√£o: {e}")
    print("Certifique-se de que a aplica√ß√£o est√° configurada corretamente")
except Exception as e:
    print(f"‚ùå Erro geral: {e}")
    import traceback
    traceback.print_exc()
